---
title: Concerning `Applications'
description: |-
  世の中の色んなところでRailsアプリケーションが使われるようになって早数年、アプリケーションで現実の複雑な問題を扱う用になるに従いアプリケーション自体も複雑になってきました。

  その結果、Railsの「モデル」と呼ばれていた層の肥大化/複雑化が問題となり、昨今ではこのRailsのモデル肥大化問題とどう向かい合うかというのが多くのRails利用者の感心事となっています。

  この問題への解決には様々なアプローチが提唱されています。そのうちの1つとして、モデルの振る舞いを「関心ごと(Concern)」単位で分割しすることで個々のクラス(のソースコードとして管理しないといけないこと)を小さく保つという手法があります。

  (Rails 4では、フレームワーク標準でこの手法が使いやすくなります)
  https://github.com/rails/rails/commit/f6bbc3f582bfc16da3acc152c702b04102fcab81

  講演者は、Rails 3のころからこの手法をたくさんの"実務の"アプリケーションに適用して来ました。その過程でずっと、関心ごとの切り取り方やちょうどよい程度のメタプログラミング、関心ごとに対するテストの書き方などに悩みながらやって来ました。本講演では、それらのノウハウを紹介したいと思います。
notes: |-
  Descriptionに書いたとおり、Webアプリケーションというだけで物珍しかった牧歌的な時代はとうに過ぎ去り、やはりRubyでもたいへんなロジックを書くような時代になってきています。
  そういった世相を反映してDCIなど新しいパラダイムも提唱されていますが、なかなかその心を理解し、実世界のアプリケーションへ適用するところに至ってないのが世の中の気がしています(もちろん私も含んで)。みんながそれぞれで試行錯誤している感じ。
  そういう状況にあって、いったん実地で試してみたアプローチを紹介し、地に足がついた感じで適用方法を説明するのは、聴講者へのおみやげとして役立つのではないかなと思った次第です。

  Descriptionのリンクから辿れるDHHのブログ記事なんかだと、DCIはtoo muchだという旨が書いてあります。とはいえそれでも、モデルの振る舞いを適切に分割するというアプローチは有効で(それを、関心ごとに分けた上でつねに組み上げておくか、ロールに分けた上でコンテキスト次第で動的に組み込むかは別として)、そのアプローチは今いる場所から地続きですよというのを紹介したいです。

  Module#prepend(やRefinements)など、Ruby 2.0の素敵そうな新機能もうまく組み込みたいとは思っておりますが、いかんせん、実地で試せていないのでウリに含め難いです。「これからやってみます!1」的なプロポーザルで申し訳ないですが、いちおうそれらを活かしたアプローチにも興味はあるので、できるだけ取り入れたいという意思はあることを申し添えておきます。
spoken_language: Japanese
speakers:
- name: moro, Kyosuke MOROHASHI
  bio: Ruby/Rails Programmer. Love TDD/BDD.
  company: EIWA System Management, Inc. Rails Programmer/Consultant
  location: Tokyo, Japan
  gravatar: 70e13d9877054026fda46d5a5b53a236
  links:
    github: moro
    twitter: moro
